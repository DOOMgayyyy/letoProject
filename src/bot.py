import logging
import random
import os
import json
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –§—Ä–∞–∑—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ ---
MENTION_REPLIES = [
    "–ö—Ç–æ-—Ç–æ –∑–≤–∞–ª —Å–∞–º–æ–≥–æ –≤–µ—Å–µ–ª–æ–≥–æ –±–æ—Ç–∞? üéâ",
    "–ù–∞ –º–µ—Å—Ç–µ! –ì–æ—Ç–æ–≤ —à—É—Ç–∏—Ç—å –∏ —Å–º–µ—è—Ç—å—Å—è. üòÑ",
    "–í—ã —É–ø–æ–º—è–Ω—É–ª–∏ –º–µ–Ω—è! –£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–π –≤–∫—É—Å. ‚ú®",
    "–Ø –∑–¥–µ—Å—å! –ß—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª–∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å?",
    "–°–ª—ã—à—É-—Å–ª—ã—à—É! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
]

JOKE_KEYWORDS = ["–∞–Ω–µ–∫–¥–æ—Ç", "—à—É—Ç–∫–∞", "—à—É—Ç–∫—É", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ—à—É—Ç–∏", "joke"]

# --- –†–∞–±–æ—Ç–∞ —Å JSON-—Ñ–∞–π–ª–æ–º ---

def load_jokes_from_json(file_path='jokes.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning(f"–§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ parser.py")
        return []
    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}'. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        return []

# –°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
jokes_list = load_jokes_from_json()

def get_random_joke():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if jokes_list:
        return random.choice(jokes_list).get("text")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø—É—Å—Ç
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    start_message = (
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–µ—Å–µ–ª—å—á–∞–∫!</b>\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —Å–≤–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –∏ —è –±—É–¥—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã!\n\n"
        "<b>–ö–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/joke</code>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç.\n"
        "‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è (@–∏–º—è_–±–æ—Ç–∞) –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: "
        "<i>¬´@–∏–º—è_–±–æ—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç¬ª</i>.\n"
        "‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω—É—Ç—å –º–µ–Ω—è, —è —Ç–æ–∂–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É—é! üòâ"
    )
    await message.answer(start_message)

@dp.message(Command("joke"))
async def cmd_joke(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /joke."""
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è JSON
    joke_text = get_random_joke()
    if joke_text:
        await message.answer(joke_text)
    else:
        await message.answer("–£–ø—Å, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à—É—Ç–∫–∏! üòî –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `jokes.json`.")

@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def handle_group_messages(message: types.Message):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö.
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞.
    """
    if not message.text:
        return

    bot_info = await bot.get_me()
    bot_username = bot_info.username

    if f"@{bot_username}".lower() in message.text.lower():
        text_lower = message.text.lower()
        if any(keyword in text_lower for keyword in JOKE_KEYWORDS):
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è JSON
            joke_text = get_random_joke()
            if joke_text:
                await message.reply(joke_text)
            else:
                await message.reply("–•–æ—Ç–µ–ª –±—ã –ø–æ—à—É—Ç–∏—Ç—å, –Ω–æ —à—É—Ç–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å! üò•")
        else:
            reply_phrase = random.choice(MENTION_REPLIES)
            await message.reply(reply_phrase)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å, –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
    await dp.start_polling(bot)


if __name__ == '__main__':
    if not BOT_TOKEN:
        logging.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    else:
        asyncio.run(main())