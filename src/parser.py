import asyncio
import json
import random
import httpx
from bs4 import BeautifulSoup

class MaximJokesParser:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ maximonline.ru.
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤.
    """
    def __init__(self):
        # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏
        self.base_url = 'https://www.maximonline.ru/entertainment/100-luchshikh-anekdotov-za-desyat-let-2010-2019-id476643/'
        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.output_file = 'jokes.json'
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

    async def fetch_html(self, client: httpx.AsyncClient) -> str | None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        print(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.base_url}")
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(random.uniform(0.5, 1.5))
            response = await client.get(self.base_url, timeout=20)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (4xx –∏–ª–∏ 5xx)
            response.raise_for_status()
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return response.text
        except httpx.RequestError as e:
            print(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {e.request.url}: {str(e)}")
            return None
        except httpx.HTTPStatusError as e:
            print(f"üö´ –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ {e.response.status_code} –¥–ª—è {e.request.url}: {str(e)}")
            return None

    def parse_jokes(self, html: str) -> list[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏–∑ HTML, –æ–±—ä–µ–¥–∏–Ω—è—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ.
        """
        print("üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤...")
        soup = BeautifulSoup(html, 'html.parser')
        jokes = []
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ div-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ª–µ–∂–∞—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã
        joke_containers = soup.find_all('div', class_='ds-article-content__block_text')

        for container in joke_containers:
            # –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏—â–µ–º –í–°–ï —Ç–µ–≥–∏ <p>
            p_tags = container.find_all('p')
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ <p>
            joke_lines = [p.get_text(strip=True) for p in p_tags if p.get_text(strip=True)]
            
            if joke_lines:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –∞–Ω–µ–∫–¥–æ—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
                full_joke_text = '\n'.join(joke_lines)
                jokes.append(full_joke_text)

        if jokes:
            print(f"üëç –ù–∞–π–¥–µ–Ω–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {len(jokes)}")
        else:
            print("‚ö†Ô∏è –ê–Ω–µ–∫–¥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞.")

        return jokes

    def save_to_json(self, jokes: list[str]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        if not jokes:
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ, —Å–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ —Ñ–∞–π–ª '{self.output_file}'...")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        formatted_jokes = [
            {"id": i + 1, "text": text} for i, text in enumerate(jokes)
        ]

        try:
            with open(self.output_file, 'w', encoding='utf-8') as f:
                json.dump(formatted_jokes, f, ensure_ascii=False, indent=2)
            print(f"üéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª '{self.output_file}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
        except IOError as e:
            print(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª '{self.output_file}': {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
        async with httpx.AsyncClient(headers=self.headers) as client:
            html = await self.fetch_html(client)
            if html:
                jokes = self.parse_jokes(html)
                self.save_to_json(jokes)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = MaximJokesParser()
    asyncio.run(parser.run())

